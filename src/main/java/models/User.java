package models;

import java.io.UnsupportedEncodingException;
import services.CryptoService;
import services.DatabaseService;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Represents a user with an ID, password, and encryption key.
 */
public class User {
	private static final Logger logger = LogManager.getLogger(User.class);


	private int id;
	private String password;
	private String encryptionKey;

	/**
	 * Creates a new User with the given password.
	 * Initializes the ID to a default value and sets the encryption key based on the password.
	 *
	 * @param password The user's password.
	 */
	public User(String password) {
		this.setId(50000); // Default ID value
		this.setPassword(password);
		this.setEncryptionKey(password);
	}

	/**
	 * Gets the user's password.
	 *
	 * @return The password.
	 */
	public String getPassword() {
		return password;
	}

	/**
	 * Sets the user's password.
	 *
	 * @param password The password to set.
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * Gets the user's ID.
	 *
	 * @return The ID.
	 */
	public int getId() {
		return id;
	}

	/**
	 * Sets the user's ID.
	 *
	 * @param id The ID to set.
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the encryption key by hashing the provided password.
	 *
	 * @param password The password used to generate the encryption key.
	 */
	private void setEncryptionKey(String password) {
		try {
			this.encryptionKey = CryptoService.hash(password);
		} catch (UnsupportedEncodingException e) {
			logger.error("Error occurred while hashing password");
		}
	}

	/**
	 * Gets the user's encryption key.
	 *
	 * @return The encryption key.
	 */
	public String getEncryptionKey() {
		return encryptionKey;
	}

	/**
	 * Returns a string representation of the user.
	 *
	 * @return A formatted string containing the user's ID and password.
	 */
	@Override
	public String toString() {
		return "{" + "\n\t" + this.id + "\n\t" + this.password + '\n' + '}';
	}

	/**
	 * Saves the user to the database and updates the user's ID with the one generated by the database.
	 */
	public void save() {
		User newUser = DatabaseService.addNewUser(
				this.getPassword(),
				this.getEncryptionKey()
		);
		this.setId(newUser.getId());
	}
}